"use client";

import React, { useState, useEffect } from "react";
import MultiSelectAreas from "@/components/Areas/MultiSelectAreas";
import FileUpload from "../../../../components/Upload/FileUpload";

interface AdFormProps {
  onSubmit: (data: any) => void;
  isSubmitting?: boolean;
  defaultValues?: {
    name?: string;
    description?: string;
    shortDescription?: string;
    isHappyHour?: boolean;
    isHot?: boolean;
    isPremium?: boolean;
    priority?: boolean;
    status?: string;
    tags?: string;
    campaignId?: string;
    age?: string;
    country?: string;
    titsSize?: string;
    mobile?: string;
    whatsapp?: string;
    telegram?: string;
    areaIds?: (string | number)[];
    cityId?: number; // Added city ID
    files?: File[];
    defaultFileName?: string;
    service_type?: 'INCALL' | 'OUTCALL' | 'MIXED';
  };
  ad_id?: string; // Optional ad_id for edit mode
}

const statusOptions = [
  { value: "active", label: "פעיל" },
  { value: "draft", label: "טיוטה" },
  { value: "archived", label: "ארכיון" },
];

const serviceTypeOptions = [
  { value: "INCALL", label: "אצלי - In Call" },
  { value: "OUTCALL", label: "אצלך - Out Call" },
  { value: "MIXED", label: "אצלי ואצלך - Mixed" },
];

export default function AdForm({
  onSubmit,
  isSubmitting = false,
  defaultValues = {},
  ad_id,
}: AdFormProps) {
  const [form, setForm] = useState({
    name: defaultValues.name || "",
    description: defaultValues.description || "",
    shortDescription: defaultValues.shortDescription || "",
    isHappyHour: defaultValues.isHappyHour || false,
    isHot: defaultValues.isHot || false,
    isPremium: defaultValues.isPremium || false,
    priority: defaultValues.priority || false,
    status: defaultValues.status || "active",
    tags: defaultValues.tags || "",
    campaignId: defaultValues.campaignId || "",
    age: defaultValues.age || "",
    country: defaultValues.country || "",
    titsSize: defaultValues.titsSize || "",
    mobile: defaultValues.mobile || "",
    whatsapp: defaultValues.whatsapp || "",
    telegram: defaultValues.telegram || "",
    areaIds: defaultValues.areaIds || [],
    cityId: defaultValues.cityId || "",
    files: defaultValues.files || [],
    defaultFileName: "",
    service_type: defaultValues.service_type || "INCALL",
  });

  // Add state for cities
  const [cities, setCities] = useState<Array<{ id: number, city_name: string }>>([]);
  const [loadingCities, setLoadingCities] = useState(false);

  // Edit mode: fetch ad data if ad_id is provided
  const [loading, setLoading] = useState(false);
  const [fetchError, setFetchError] = useState<string | null>(null);

  useEffect(() => {
    if (!ad_id) return;
    setLoading(true);
    setFetchError(null);
    fetch(`/api/ads/${ad_id}`)
      .then(async (res) => {
        if (!res.ok) throw new Error("Failed to fetch ad details");
        return res.json();
      })
      .then((data) => {
        console.log('Fetched ad data:', data); // Debug log
        
        // Extract areaIds from the response and ensure they are strings
        let areaIds: string[] = [];
        if (data.areas && Array.isArray(data.areas)) {
          areaIds = data.areas.map((adArea: any) => adArea.areaId?.toString() || '').filter(Boolean);
        } else if (data.areaIds && Array.isArray(data.areaIds)) {
          areaIds = data.areaIds.map((id: any) => id?.toString() || '').filter(Boolean);
        }
        
        console.log('Extracted areaIds:', areaIds); // Debug log
        
        setForm({
          name: data.name || "",
          description: data.description || "",
          shortDescription: data.shortDescription || "",
          isHappyHour: data.isHappyHour || false,
          isHot: data.isHot || false,
          isPremium: data.isPremium || false,
          priority: data.priority || false,
          status: data.status || "active",
          tags: data.tags ? (Array.isArray(data.tags) ? data.tags.join(", ") : data.tags) : "",
          campaignId: data.campaignId || "",
          age: data.age ? data.age.toString() : "",
          country: data.country || "",
          titsSize: data.titsSize || "",
          mobile: data.mobile || "",
          whatsapp: data.whatsapp || "",
          telegram: data.telegram || "",
          areaIds: areaIds,
          cityId: data.cityId || "", // Set cityId from fetched data
          files: [], // Files will be handled separately in edit mode
          defaultFileName: data.images && data.images.length > 0 ? 
            data.images.find((img: any) => img.isDefault)?.fileName || data.images[0]?.fileName || "" : "",
          service_type: data.service_type || "INCALL",
        });
      })
      .catch((err) => {
        console.error('Error fetching ad:', err);
        setFetchError(err.message || "Error loading ad");
      })
      .finally(() => setLoading(false));
  }, [ad_id]);

  // Restore: update form when defaultValues change, but only if not in edit mode
  useEffect(() => {
    if (ad_id) return; // Don't override edit mode
    setForm({
      name: defaultValues.name || "",
      description: defaultValues.description || "",
      shortDescription: defaultValues.shortDescription || "",
      isHappyHour: defaultValues.isHappyHour || false,
      isHot: defaultValues.isHot || false,
      isPremium: defaultValues.isPremium || false,
      priority: defaultValues.priority || false,
      status: defaultValues.status || "active",
      tags: defaultValues.tags || "",
      campaignId: defaultValues.campaignId || "",
      age: defaultValues.age || "",
      country: defaultValues.country || "",
      titsSize: defaultValues.titsSize || "",
      mobile: defaultValues.mobile || "",
      whatsapp: defaultValues.whatsapp || "",
      telegram: defaultValues.telegram || "",
      areaIds: defaultValues.areaIds || [],
      cityId: defaultValues.cityId || "", // Initialize cityId
      files: defaultValues.files || [],
      defaultFileName: defaultValues.defaultFileName || "",
      service_type: defaultValues.service_type || 'INCALL',
    });
  }, [defaultValues, ad_id]);

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    if (!form.name.trim()) newErrors.name = "שדה חובה";
    if (!form.status) newErrors.status = "שדה חובה";
    if (!form.campaignId) newErrors.campaignId = "חובה לבחור קמפיין";
    if (!form.areaIds || form.areaIds.length === 0) newErrors.areaIds = "חובה לבחור לפחות אזור אחד";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    const checked = (e.target as HTMLInputElement).checked;

    setForm((prev) => ({
      ...prev,
      [name]: e.target.type === "checkbox" ? checked : value,
    }));
  };

  // Add function to fetch cities when area changes
  const fetchCities = async (areaId: string | number) => {
    try {
      setLoadingCities(true);
      console.log(`Fetching cities for area ID: ${areaId}`);
      
      const response = await fetch(`/api/cities/${areaId}`);
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`HTTP Status: ${response.status}, Response:`, errorText);
        throw new Error(`Failed to fetch cities: ${response.status} ${errorText}`);
      }
      
      const data = await response.json();
      console.log('Cities data received:', data);
      setCities(data);
      
    } catch (error) {
      console.error('Error fetching cities:', error);
      // Show error in form
      setErrors(prev => ({ ...prev, cities: error instanceof Error ? error.message : 'Failed to fetch cities' }));
    } finally {
      setLoadingCities(false);
    }
  };

  // Modify handleAreaChange to fetch cities
  const handleAreaChange = (areaIdsValue: (string | number)[]) => {
    // Convert all area IDs to strings to ensure consistent type
    const stringAreaIds = areaIdsValue.map(id => id.toString());
    setForm((prev) => ({
      ...prev,
      areaIds: stringAreaIds,
      cityId: "", // Reset city when area changes
    }));
    if (errors.areaIds) {
      setErrors((prev) => ({ ...prev, areaIds: "" }));
    }
    
    // If there's exactly one area selected, fetch its cities
    if (areaIdsValue.length === 1) {
      fetchCities(areaIdsValue[0]);
    } else {
      setCities([]); // Clear cities if multiple or no areas selected
    }
  };

  const handleFilesChange = (files: File[]) => {
    setForm((prev) => ({
      ...prev,
      files: files,
      // If we're setting files for the first time, set the first one as default
      defaultFileName: prev.defaultFileName || (files.length > 0 ? files[0].name : ""),
    }));
  };
  
  const handleSetDefaultFile = (file: File) => {
    setForm((prev) => ({
      ...prev,
      defaultFileName: file.name,
    }));
  };

  const uploadFiles = async (adId: string, files: File[]) => {
    if (!files.length) return { success: true };

    try {
      const formData = new FormData();
      files.forEach((file) => {
        formData.append("files", file);
      });
      
      // Add the default file name to the form data
      if (form.defaultFileName) {
        formData.append("defaultFileName", form.defaultFileName);
      }

      const response = await fetch(`/api/ads/${adId}/upload`, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to upload files");
      }
      
      const result = await response.json();
      
      // If we have a default file, set it as default on the server
      if (form.defaultFileName && result.success) {
        const defaultFile = files.find(file => file.name === form.defaultFileName);
        if (defaultFile) {
          const serverFileName = result.files.find(
            (f: any) => f.originalName === defaultFile.name
          )?.fileName;
          
          if (serverFileName) {
            await fetch(`/api/ads/${adId}/default-media`, {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ fileName: serverFileName }),
            });
          }
        }
      }

      return result;
    } catch (error: any) {
      console.error("Error uploading files:", error);
      throw new Error(error.message || "Failed to upload files");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;
    
    try {
      // Prepare the data to submit
      const dataToSubmit = {
        ...form,
        tags: form.tags
          .split(",")
          .map((t) => t.trim()),
        cityId: form.cityId ? parseInt(form.cityId.toString()) : undefined
          .filter(Boolean),
        areaIds: form.areaIds,
      };
      
      // Call the parent's onSubmit handler with the form data and files
      await onSubmit({
        ...dataToSubmit,
        files: form.files,
        defaultFileName: form.defaultFileName
      });
      
    } catch (err: any) {
      console.error("Error in handleSubmit:", err);
      setErrors({ general: err.message || "Error processing ad" });
    }
  };

  if (loading) {
    return <div className="p-6 text-center">טוען נתוני מודעה...</div>;
  }
  if (fetchError) {
    return (
      <div className="p-6 text-center text-red-500">
        שגיאה בטעינת נתוני מודעה: {fetchError}
      </div>
    );
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-5xl mx-auto transition-all duration-200 ease-in-out"
    >
      <div className="bg-gray-50 dark:bg-gray-900 rounded-xl border border-gray-100 dark:border-gray-800 overflow-hidden">
        {/* Form Header */}
        <div className="p-6 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900">
          <h2 className="text-2xl font-semibold text-gray-800 dark:text-white">
            {ad_id ? "עריכת מודעה" : "יצירת מודעה חדשה"}
          </h2>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            {ad_id
              ? "ערוך את פרטי המודעה"
              : "מלא את הפרטים ליצירת מודעה חדשה במערכת"}
          </p>
        </div>

        {/* Form Body */}
        <div className="p-6 space-y-6">
          {/* Name Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="name"
            >
              שם מודעה <span className="text-red-500">*</span>
            </label>
            <input
              id="name"
              name="name"
              type="text"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
              value={form.name}
              onChange={handleChange}
              required
              placeholder="הכנס שם למודעה"
            />
            {errors.name && (
              <div className="text-red-500 text-xs mt-1">{errors.name}</div>
            )}
          </div>

          {/* Short Description Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="shortDescription"
            >
              תיאור קצר
            </label>
            <input
              id="shortDescription"
              name="shortDescription"
              type="text"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
              value={form.shortDescription}
              onChange={handleChange}
              placeholder="הכנס תיאור קצר למודעה"
            />
          </div>

          {/* Description Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="description"
            >
              תיאור
            </label>
            <textarea
              id="description"
              name="description"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200 min-h-[120px]"
              value={form.description}
              onChange={handleChange}
              rows={3}
              placeholder="הוסף תיאור מפורט למודעה"
            />
          </div>

          {/* Checkboxes Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <label className="flex items-center p-4 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 cursor-pointer group">
              <input
                type="checkbox"
                name="isHappyHour"
                checked={form.isHappyHour}
                onChange={handleChange}
                className="w-5 h-5 text-primary border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-offset-gray-800"
              />
              <span className="mr-3 text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200">
                Happy Hour
              </span>
            </label>
            <label className="flex items-center p-4 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 cursor-pointer group">
              <input
                type="checkbox"
                name="isHot"
                checked={form.isHot}
                onChange={handleChange}
                className="w-5 h-5 text-primary border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-offset-gray-800"
              />
              <span className="mr-3 text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200">
                חם 🔥
              </span>
            </label>
            <label className="flex items-center p-4 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 cursor-pointer group">
              <input
                type="checkbox"
                name="isPremium"
                checked={form.isPremium}
                onChange={handleChange}
                className="w-5 h-5 text-primary border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-offset-gray-800"
              />
              <span className="mr-3 text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200">
                פרימיום ⭐
              </span>
            </label>
            <label className="flex items-center p-4 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 cursor-pointer group">
              <input
                type="checkbox"
                name="priority"
                checked={form.priority}
                onChange={handleChange}
                className="w-5 h-5 text-primary border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-offset-gray-800"
              />
              <span className="mr-3 text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200">
                עדיפות ⚡
              </span>
            </label>
          </div>

          {/* Status Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="status"
            >
              סטטוס <span className="text-red-500">*</span>
            </label>
            <select
              id="status"
              name="status"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
              value={form.status}
              onChange={handleChange}
              required
            >
              {statusOptions.map((opt) => (
                <option
                  key={opt.value}
                  value={opt.value}
                  className="bg-white dark:bg-gray-700"
                >
                  {opt.label}
                </option>
              ))}
            </select>
            {errors.status && (
              <div className="text-red-500 text-xs mt-1">{errors.status}</div>
            )}
          </div>

          {/* Tags Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="tags"
            >
              תגיות
            </label>
            <input
              id="tags"
              name="tags"
              type="text"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
              value={form.tags}
              onChange={handleChange}
              placeholder="הכנס תגיות מופרדות בפסיקים (לדוגמה: מבצע, חורף, קיץ)"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400">
              הפרד תגיות בעזרת פסיקים
            </p>
          </div>

          {/* Service Type Field */}
          <div className="space-y-2">
            <label
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              htmlFor="service_type"
            >
              סוג שירות
            </label>
            <select
              id="service_type"
              name="service_type"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
              value={form.service_type}
              onChange={handleChange}
              required
            >
              {serviceTypeOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Areas Multi-Select */}
          <div className="space-y-2">
            <MultiSelectAreas
              label="אזורים"
              id="areaIds"
              value={form.areaIds}
              onChange={handleAreaChange}
              className="w-full"
              required
              placeholder="בחר אזורים..."
              maxSelections={5}
            />
            {errors.areaIds && (
              <div className="text-red-500 text-xs mt-1">{errors.areaIds}</div>
            )}
          </div>

          {/* City Selection - Only show when exactly one area is selected */}
          {form.areaIds.length === 1 && (
            <div className="space-y-2">
              <label
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                htmlFor="cityId"
              >
                עיר
              </label>
              <select
                id="cityId"
                name="cityId"
                className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                value={form.cityId}
                onChange={handleChange}
                disabled={loadingCities}
              >
                <option value="">בחר עיר...</option>
                {cities.map((city) => (
                  <option key={city.id} value={city.id}>
                    {city.city_name}
                  </option>
                ))}
              </select>
              {loadingCities && (
                <p className="text-sm text-gray-500">טוען ערים...</p>
              )}
            </div>
          )}

          {/* File Upload Section */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              תמונות ווידאו
            </label>
            <FileUpload
              onFilesChange={handleFilesChange}
              maxFiles={10}
              acceptedTypes={["image/*", "video/*"]}
              maxFileSize={50}
              files={form.files}
              className="w-full"
              onSetDefaultFile={handleSetDefaultFile}
              defaultFileName={form.defaultFileName}
            />
            <p className="text-xs text-gray-500 dark:text-gray-400">
              ניתן להעלות עד 10 קבצים (תמונות ווידאו) בגודל מקסימלי של 50MB כל אחד
            </p>
          </div>

          {/* Personal Details Section */}
          <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-4">
              פרטים אישיים
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Age Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="age"
                >
                  גיל
                </label>
                <input
                  id="age"
                  name="age"
                  type="number"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.age}
                  onChange={handleChange}
                  placeholder="הכנס גיל"
                />
              </div>

              {/* Country Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="country"
                >
                  מדינה
                </label>
                <input
                  id="country"
                  name="country"
                  type="text"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.country}
                  onChange={handleChange}
                  placeholder="הכנס מדינה"
                />
              </div>

              {/* Tits Size Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="titsSize"
                >
                  מידת חזה
                </label>
                <input
                  id="titsSize"
                  name="titsSize"
                  type="text"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.titsSize}
                  onChange={handleChange}
                  placeholder="הכנס מידת חזה"
                />
              </div>

              {/* Mobile Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="mobile"
                >
                  מספר נייד
                </label>
                <input
                  id="mobile"
                  name="mobile"
                  type="text"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.mobile}
                  onChange={handleChange}
                  placeholder="הכנס מספר נייד"
                />
              </div>

              {/* WhatsApp Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="whatsapp"
                >
                  מספר וואטסאפ
                </label>
                <input
                  id="whatsapp"
                  name="whatsapp"
                  type="text"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.whatsapp}
                  onChange={handleChange}
                  placeholder="הכנס מספר וואטסאפ"
                />
              </div>

              {/* Telegram Field */}
              <div className="space-y-2">
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  htmlFor="telegram"
                >
                  כתובת טלגרם
                </label>
                <input
                  id="telegram"
                  name="telegram"
                  type="text"
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary dark:focus:border-primary transition-colors duration-200"
                  value={form.telegram}
                  onChange={handleChange}
                  placeholder="הכנס כתובת טלגרם"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Form Footer */}
        <div className="px-6 py-4 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 flex justify-end">
          <button
            type="submit"
            className="px-6 py-2 bg-primary hover:bg-primary-dark text-white rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary/50 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={isSubmitting}
          >
            {isSubmitting ? "שומר מודעה..." : "שמור מודעה"}
          </button>
        </div>
      </div>
    </form>
  );
}
